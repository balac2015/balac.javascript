
jQuery 元素选择与遍历

	（以不同的方式使用选择符查找和筛选数据、编写插件以添加新选择符和DOM遍历方法、优化选择符表达式，提高执行速度、理解Sizzle引擎的某些内部工作原理。）


	Sizzle 一个独立的 CSS 选择符引擎，jQuery1.3 开始使用，jQuery 之父 John Resig 发表的 javascript 项目


$() 函数：
	
	接受 CSS 选择符作为参数，返回包含页面中对应元素的 jQuery 对象

	连缀、隐式循环遍历（避免了 for 循环之类的显示迭代）


CSS 选择符：支持 CSS 规范 1 到规范 3 中的几乎所有选择符（http://www.w3.org/Style/CSS/specs）

	渐进增强（progressive enhancement）、平稳退化（graceful degradation）（http://en.wikipedia.org/wiki/Progressive_enhancement）

	属性选择符：^、$、*、! 分别表示匹配值在字符串的开始、结尾、任意位置、取反


自定义选择符：基于已经选择的元素集的位置来查找元素。（http://api.jquery.com/category/selectors/）
	
	语法与伪类选择符语法相同，以冒号（:） 开头，性能上不好
	

DOM 遍历方法 --- jQuery 选择符取得一组元素
	
	在DOM树中上下左右地自由漫步。

	.filter() 迭代所有匹配的元素，接手函数为参数，如果函数返回 false，则从匹配集合中删除相应元素；如果返回 true，则保留相应元素。

	连缀原理：几乎所有 jQuery 方法都会返回一个 jQuery 对象，因而可连缀调用多个jQuery方法

	.end()、.addBack()


访问 DOM 元素 --- $().get(0).tagName 或 $()[0].tagName		获取元素标签名
	
	所有选择符表达式和多数 jQuery 方法都返回一个 jQuery 对象

	.get() 访问 DOM 元素，$().get(index).tagName 访问 DOM 对象，简写：$()[index].tagName


深入选择与遍历
	
	使用选择符还是使用与其对应的遍历方法，最终可能会导致性能上的差异。

	$('#news tr:has(td)') --- 选择符，$('#news').find('tr:has(td)') --- 遍历方法


Sizzle 的选择符实现：

	在最本质的层次上，Sizzle 会应用浏览器支持的最高效的原生 DOM 方法取得 nodeList，将取得的对象转换成数组，添加到 jQuery 对象中

	DOM 方法：.getElementById()、.getElementsByTagName()  --- 全部浏览器支持

			.getElementsByClassName()	--- IE9+、Firefox3+、Safari4+、Chrome4+、Opera10+

			.querySelectorAll()，取得与给定的选择符表达式匹配的所有元素--- IE8+、Firefox3.5+、Safari3+、Chrome4+、Opera10+

	查询未果时，Sizzle 就会使用 document.getElementsByTagName('*') 来取得文档中的全部元素，然后再遍历并测试每个元素。

	自定义选择符（:eq()、:odd、:even 等）没有对应的 CSS 版本，那 Sizzle 也别无选择，只能循环加测试

	测试选择符的速度：
		$('[type="text"]')（使用 .querySelectorAll()） 和 $(':text')（使用循环）


3、DOM 遍历背后的秘密

	深入理解DOM遍历方法的运作机制。

	jQuery 对象属性：.context 属性中包含着一个 DOM 节点（通常是 document ）的引用、

			.selector 属性中保存着创建最终对象的选择符表达式、

			.prevObject 属性中保存着调用遍历方法的那个jQuery对象

			var $cell = $('#release');		// 2、var $cell = $('#release').nextAll();
			$cell.addClass('highlight');
			console.log($cell.context);		// Document     2、Document
			console.log($cell.selector);	// #release     2、#release.nextAll()       
			console.log($cell.prevObject);		// underfined，刚创建的对象，还没有之前的调用对象。
										2、[td] 保存着调用.nextAll()之前的那个jQuery对象实例的引用。

	DOM 元素栈：.end() 和 .addBack() 方法就是用来操作这个栈的

	编写 DOM 遍历方法插件：与其他的 jQuery 对象方法类似，也可以通过为 $.fn 添加属性的方式来向 jQuery 中添加遍历方法。

			(function($){
				$.fn.new = function () { ... };
			})(jQuery)

	DOM 遍历的性能问题：无论什么时候，都应该把简化代码的编写和维护工作放在首位。

		1、使用连缀来改进性能，

		2、使用缓存来改进性能，如 var $news = $('#news');

-------------------------------------------------------------------------------------------------
jQuery 选择器：
基本：
	#id、 element、 .class、 *、 selector1,selector2,selectorN

层级：
	ancestor descendant、 parent > child、 prev + next、 prev ~ siblings

基本：
	:first、 :last、 :not(selector)、 :even、 :odd、 :eq(index)、 :gt(index)、 :lt(index)、 :header、 :animated、 :focus

内容：
	:contains(text)、 :empty、 :has(selector)、 :parent

可见性：
	:hidden、 :visible

属性：
	[attribute]、 [attribute=value]、 [attribute!=value]、 [attribute^=value]、 [attribute$=value]、 [attribute*=value]、 [attrSel1][attrSel2][attrSelN]

子元素：
	:nth-child、 :first-child、 :last-child、 :only-child

表单：
	:input、 :text、 :password、 :radio、 :checkbox、 :submit、 :image、 :reset、 :button、 :file、 :hidden  

表单对象属性：
	:enabled、 :disabled、 :checked、 :selected

-------------------------------------------------------------------------------------------------
jQuery 遍历
过滤：
	eq(index|-index)、 first()、 last()、 hasClass(class)、 filter(expr |obj | ele| fn)、 is(expr| obj| ele| fn)、 map(callback)、 has(expr| ele)、 not(expr| ele| fn)、 slice(start, [end]) 
-------------------------------------------------------------------------------------------------
.horizontal 水平

a[href^="maito:"]