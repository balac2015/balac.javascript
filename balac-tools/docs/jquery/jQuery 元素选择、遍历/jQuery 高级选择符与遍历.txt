	jQuery 高级选择符与遍历

	Sizzle 是一个独立的 CSS 选择符引擎，jQuery1.3 开始使用。开源、可用于任何 JS 库（少量修改甚至不修改）


介绍：不同方式使用选择符查找和筛选数据、编写插件以添加新选择符和 DOM 遍历方法、优化选择符表达式，提高执行速度、理解Sizzle引擎的某些内部工作原理。


1、深入选择与遍历
	
	$('#news tr:has(td)') --- 选择符，$('#news').find('tr:has(td)') --- 遍历方法

		$('#news tr:has(td):not(:contains("' + tipic + '"))').hide();

			:has() 自定义选择符，符从当前被选中的元素中挑选出那些包含指定元素的元素

			:contains() 自定义选择符，只会匹配那些某个单元格中包含指定文本的行

			.not() 接收的回调函数，将在检测每个元素的时候调用，返回true，那么被检测的元素就会被排除在结果集之外。

		$('#news').find('tr:has(td)'.not(function () {
			return $(this).children(':nth-child(4)').text() == topic;
		}).hide();

	选择符与遍历方法：使用选择符还是使用与其对应的遍历方法，最终可能会导致性能上的差异。

	参考收藏：选择符介绍：http://api.jquery.com/category/selectors/

			遍历方法介绍：http://api.jquery.com/category/traversing/

	为表格行交替应用不同颜色的方式：:even、:odd、:nth-child()    ------ $('#news').find('tr:nth-child(even)').accClass('alt')

	伪类选择符 :visible ，会排除由于各种原因隐藏的元素，包括display值为none以及width和height属性被设置为0。

	.filter(function(index){ ... })  index参数目前保存的是每个元素从 0 开始计数的位置，

2、定制与优化选择符
	
	有效地查找元素：如代码容易读、容易写、运行的速度更快。

	最容易添加的选择符插件是伪类，如 :checked、:nth-child()

	在使用选择符表达式查找元素的时候，jQuery会在一个内部的对象 expr 中取得JavaScript代码。expr 类似于 .filter() 参数的筛选函数，当函数返回 true 时，才会让每个元素包含在结果集中，$.extend() 为其添加新的表达式。

	开发人员中有一条经验法则，那就是人的时间总比机器的时间更值钱——除非应用程序确实明显反应迟钝。

	在规划任何Web项目的时候，都需要考虑项目周期、维护代码的难易程度和效率，以及用户使用网站过程中的性能等问题

		把某些选择符替换为遍历方法可以节省查找页面元素的时间

	针对选择符和遍历速度所作的任何决定，都有可能伴随着更新更快的浏览器发布，或者jQuery新版本加入巧妙的速度优化而变得毫无价值。为了真正提升性能，最好反复思考自己假定的条件，然后在使用jsPerf（http://jsperf.com/）等工具实际测量之后，再动手编写优化代码。


	Sizzle 的选择符实现：

		在最本质的层次上，Sizzle会应用浏览器支持的最高效的原生DOM方法取得nodeList，将取得的对象转换成数组，添加到 jQuery 对象中

		DOM 方法：.getElementById()、.getElementsByTagName()  --- 全部浏览器支持

			.getElementsByClassName()	--- IE9+、Firefox3+、Safari4+、Chrome4+、Opera10+

			.querySelectorAll()，取得与给定的选择符表达式匹配的所有元素--- IE8+、Firefox3.5+、Safari3+、Chrome4+、Opera10+

		查询未果时，Sizzle就会使用document.getElementsByTagName('*')来取得文档中的全部元素，然后再遍历并测试每个元素。

		自定义选择符（:eq()、:odd、:even 等）没有对应的CSS版本，那Sizzle也别无选择，只能循环加测试

	测试选择符的速度：
		$('[type="text"]')（使用 .querySelectorAll()） 和 $(':text')（使用循环）

	要尽可能使用CSS规范中规定的选择符，除非没有可使用jQuery的自定义选择符。同样，在修改选择符之前，也要记住只在确实有必要提升性能的情况下再去提升。至于测量修改选择符之后的性能提升了多少，可以使用类似http://jsperf.com/所提供的基准测试工具

3、DOM 遍历背后的秘密

	深入理解DOM遍历方法的运作机制。

	jQuery 对象属性：.context 属性中包含着一个DOM节点（通常是document）的引用、

			.selector 属性中保存着创建最终对象的选择符表达式、

			.prevObject 属性中保存着调用遍历方法的那个jQuery对象，即指向前一个的 jquery 对象

			var $cell = $('#release');		// 2、var $cell = $('#release').nextAll();
			$cell.addClass('highlight');
			console.log($cell.context);		// Document     2、Document
			console.log($cell.selector);	// #release     2、#release.nextAll()       
			console.log($cell.prevObject);		// underfined，刚创建的对象，还没有之前的调用对象。
										2、[td] 保存着调用.nextAll()之前的那个jQuery对象实例的引用。

	DOM 元素栈：.end()、.addBack() 方法用来操作栈

		.end() 只是简单地从栈中弹出一个元素，结果就是栈的最上方保存着与.prevObject属性中相同的引用

		.addBack() 调用时，jQuery会在栈中回溯一个位置，把两个位置上的元素集组合起来

			$('#release').nextAll().addBack().addClass('highlinght')  则会为 $('#release') 和 $('#release').nextAll() 同时添加类

		
		编写 DOM 遍历方法插件：

			可以通过为 $.fn 添加属性的方式来向 jQuery 添加遍历方法，但是返回的 jQuery 对象必须要指向一个新匹配的元素集。

			(function($){
				$.fn.new = function () { ... };
			})(jQuery)

		.closest() 向上遍历并检测DOM树（包括调用对象自身）直至找到与选择符匹配的一个元素，在实现事件委托的时候它是非常有用的。


	DOM遍历的性能问题：

		无论什么时候，都应该把简化代码的编写和维护工作放在首位。

		1. 使用连缀来改进性能。减少重复、让代码更简洁

		2. 使用缓存来改进性能，如 var $news = $('#news'); 可以避免重复使用选择符，

4、小结

	探讨了jQuery在文档中查找元素的种种方法，剖析了Sizzle选择符引擎内部的工作机制，以及理解其工作原理对于设计高效代码的重要意义。此外，我们还讨论了扩展jQuery选择符及DOM遍历方法的一些方式。